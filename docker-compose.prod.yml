version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    image: leather-api:latest
    command: gunicorn leather_api.wsgi:application --config gunicorn.conf.py
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    env_file:
      - .env.production
    depends_on:
      - redis
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/healthcheck/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    image: leather-api:latest
    command: celery -A leather_api worker -l info --concurrency=4
    env_file:
      - .env.production
    depends_on:
      - redis
    networks:
      - app_network
    restart: unless-stopped

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    image: leather-api:latest
    command: celery -A leather_api beat -l info
    env_file:
      - .env.production
    depends_on:
      - redis
    networks:
      - app_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
      - certbot_conf:/etc/letsencrypt:ro
      - certbot_www:/var/www/certbot:ro
    depends_on:
      - web
    networks:
      - app_network
    restart: unless-stopped

  certbot:
    image: certbot/certbot
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  static_volume:
  media_volume:
  redis_data:
  certbot_conf:
  certbot_www:

networks:
  app_network:
    driver: bridge
